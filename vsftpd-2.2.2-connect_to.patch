diff -up vsftpd-2.2.2/oneprocess.c.pasv_issue vsftpd-2.2.2/oneprocess.c
--- vsftpd-2.2.2/oneprocess.c.pasv_issue	2013-01-22 22:36:47.369886618 +0100
+++ vsftpd-2.2.2/oneprocess.c	2013-01-22 22:37:19.024906759 +0100
@@ -129,7 +129,7 @@ int
 vsf_one_process_get_priv_data_sock(struct vsf_session* p_sess)
 {
   unsigned short port = vsf_sysutil_sockaddr_get_port(p_sess->p_port_sockaddr);
-  return vsf_privop_get_ftp_port_sock(p_sess, port);
+  return vsf_privop_get_ftp_port_sock(p_sess, port, 1);
 }
 
 void
diff -up vsftpd-2.2.2/postprivparent.c.pasv_issue vsftpd-2.2.2/postprivparent.c
--- vsftpd-2.2.2/postprivparent.c.pasv_issue	2009-07-14 07:15:30.000000000 +0200
+++ vsftpd-2.2.2/postprivparent.c	2013-01-22 22:36:29.122880892 +0100
@@ -125,7 +125,7 @@ static void
 cmd_process_get_data_sock(struct vsf_session* p_sess)
 {
   unsigned short port = (unsigned short) priv_sock_get_int(p_sess->parent_fd);
-  int sock_fd = vsf_privop_get_ftp_port_sock(p_sess, port);
+  int sock_fd = vsf_privop_get_ftp_port_sock(p_sess, port, 0);
   if (sock_fd == -1)
   {
     priv_sock_send_result(p_sess->parent_fd, PRIV_SOCK_RESULT_BAD);
diff -up vsftpd-2.2.2/privops.c.pasv_issue vsftpd-2.2.2/privops.c
--- vsftpd-2.2.2/privops.c.pasv_issue	2009-10-19 05:51:33.000000000 +0200
+++ vsftpd-2.2.2/privops.c	2013-01-22 22:36:29.122880892 +0100
@@ -33,9 +33,11 @@ static enum EVSFPrivopLoginResult handle
 
 int
 vsf_privop_get_ftp_port_sock(struct vsf_session* p_sess,
-                             unsigned short remote_port)
+                             unsigned short remote_port,
+                             int use_port_sockaddr)
 {
   static struct vsf_sysutil_sockaddr* p_sockaddr;
+  const struct vsf_sysutil_sockaddr* p_connect_to;
   int retval;
   int i;
   int s = vsf_sysutil_get_ipsock(p_sess->p_local_addr);
@@ -71,8 +73,16 @@ vsf_privop_get_ftp_port_sock(struct vsf_
     sleep_for += 1.0;
     vsf_sysutil_sleep(sleep_for);
   }
-  vsf_sysutil_sockaddr_set_port(p_sess->p_remote_addr, remote_port);
-  retval = vsf_sysutil_connect_timeout(s, p_sess->p_remote_addr,
+  if (use_port_sockaddr)
+  {
+    p_connect_to = p_sess->p_port_sockaddr;
+  }
+  else
+  { 
+    vsf_sysutil_sockaddr_set_port(p_sess->p_remote_addr, remote_port);
+    p_connect_to = p_sess->p_remote_addr;
+  }
+  retval = vsf_sysutil_connect_timeout(s, p_connect_to,
                                        tunable_connect_timeout);
   if (vsf_sysutil_retval_is_error(retval))
   {
diff -up vsftpd-2.2.2/privops.h.pasv_issue vsftpd-2.2.2/privops.h
--- vsftpd-2.2.2/privops.h.pasv_issue	2009-07-07 19:45:50.000000000 +0200
+++ vsftpd-2.2.2/privops.h	2013-01-22 22:36:29.122880892 +0100
@@ -9,8 +9,9 @@ struct vsf_session;
  * Return a network socket potentially bound to a privileged port (less than
  * 1024) and connected to the remote.
  * PARAMETERS
- * p_sess       - the current session object
- * remote_port  - the remote port to connect to
+ * p_sess            - the current session object
+ * remote_port       - the remote port to connect to
+ * use_port_sockaddr - true if we should use the specific sockaddr for connect
  * RETURNS
  * A file descriptor which is a socket bound to the privileged port, and
  * connected to the remote on the specified port.
@@ -18,7 +19,8 @@ struct vsf_session;
  * Returns -1 if the bind() worked but the connect() was not possible.
  */
 int vsf_privop_get_ftp_port_sock(struct vsf_session* p_sess,
-                                 unsigned short remote_port);
+                                 unsigned short remote_port,
+                                 int use_port_sockaddr);
 
 /* vsf_privop_pasv_cleanup()
  * PURPOSE
